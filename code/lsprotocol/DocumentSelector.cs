// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// A document selector is the combination of one or many document filters.
    /// 
    /// 
    /// The use of a string as a document filter is deprecated @since 3.16.0.
    /// </summary>
    [Since("3.16.0.")]
    [JsonConverter(typeof(DocumentSelectorConverter))]
    [DataContract]
    public record DocumentSelector: IEnumerable<DocumentFilter>
    {
        private DocumentFilter[] Filters { get; set; }
        public DocumentSelector(params DocumentFilter[] filters)
        {
            Filters = filters ?? Array.Empty<DocumentFilter>();
        }
        public DocumentFilter this[int index]
        {
            get { return Filters[index]; }
            set { Filters[index] = value; }
        }
        public int Length => Filters.Length;
        public static implicit operator DocumentSelector(DocumentFilter[] filters) => new(filters);
        public static implicit operator DocumentFilter[](DocumentSelector selector) => selector.Filters;
        public IEnumerator<DocumentFilter> GetEnumerator() => ((IEnumerable<DocumentFilter>)Filters).GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Filters.GetEnumerator();
    }

}
