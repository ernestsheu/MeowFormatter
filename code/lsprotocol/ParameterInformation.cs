// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Represents a parameter of a callable-signature. A parameter can
    /// have a label and a doc-comment.
    /// </summary>
    [DataContract]
    public record ParameterInformation
    {
        [JsonConstructor]
        public ParameterInformation(
            OrType<string, (long, long)> label,
            OrType<string, MarkupContent>? documentation = null
        )
        {
            Label = label;
            Documentation = documentation;
        }
        /// <summary>
        /// The label of this parameter information.
        /// 
        /// Either a string or an inclusive start and exclusive end offsets within its containing
        /// signature label. (see SignatureInformation.label). The offsets are based on a UTF-16
        /// string representation as `Position` and `Range` does.
        /// 
        /// To avoid ambiguities a server should use the [start, end] offset value instead of using
        /// a substring. Whether a client support this is controlled via `labelOffsetSupport` client
        /// capability.
        /// 
        /// *Note*: a label of type string should be a substring of its containing signature label.
        /// Its intended use case is to highlight the parameter label part in the `SignatureInformation.label`.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<string, (long, long)>))]
        [DataMember(Name = "label")]
        public OrType<string, (long, long)> Label { get; init; }
        /// <summary>
        /// The human-readable doc-comment of this parameter. Will be shown
        /// in the UI but can be omitted.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<string, MarkupContent>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentation")]
        public OrType<string, MarkupContent>? Documentation { get; init; }
    }

}
