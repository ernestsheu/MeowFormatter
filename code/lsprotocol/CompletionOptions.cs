// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Completion options.
    /// </summary>
    [DataContract]
    public record CompletionOptions
    {
        [JsonConstructor]
        public CompletionOptions(
            ImmutableArray<string> triggerCharacters = default!,
            ImmutableArray<string> allCommitCharacters = default!,
            bool? resolveProvider = null,
            ServerCompletionItemOptions? completionItem = null,
            bool? workDoneProgress = null
        )
        {
            TriggerCharacters = triggerCharacters;
            AllCommitCharacters = allCommitCharacters;
            ResolveProvider = resolveProvider;
            CompletionItem = completionItem;
            WorkDoneProgress = workDoneProgress;
        }
        /// <summary>
        /// Most tools trigger completion request automatically without explicitly requesting
        /// it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
        /// starts to type an identifier. For example if the user types `c` in a JavaScript file
        /// code complete will automatically pop up present `console` besides others as a
        /// completion item. Characters that make up identifiers don't need to be listed here.
        /// 
        /// If code complete should automatically be trigger on characters not being valid inside
        /// an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<string>))]
        [DataMember(Name = "triggerCharacters")]
        public ImmutableArray<string> TriggerCharacters { get; init; }
        /// <summary>
        /// The list of all possible characters that commit a completion. This field can be used
        /// if clients don't support individual commit characters per completion item. See
        /// `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`
        /// 
        /// If a server provides both `allCommitCharacters` and commit characters on an individual
        /// completion item the ones on the completion item win.
        /// 
        /// </summary>
        [Since("3.2.0")]
        [JsonConverter(typeof(CustomArrayConverter<string>))]
        [DataMember(Name = "allCommitCharacters")]
        public ImmutableArray<string> AllCommitCharacters { get; init; }
        /// <summary>
        /// The server provides support to resolve additional
        /// information for a completion item.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "resolveProvider")]
        public bool? ResolveProvider { get; init; }
        /// <summary>
        /// The server supports the following `CompletionItem` specific
        /// capabilities.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "completionItem")]
        public ServerCompletionItemOptions? CompletionItem { get; init; }
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "workDoneProgress")]
        public bool? WorkDoneProgress { get; init; }
    }

}
