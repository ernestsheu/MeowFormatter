// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// The change text document notification's parameters.
    /// </summary>
    [DataContract]
    public record DidChangeTextDocumentParams
    {
        [JsonConstructor]
        public DidChangeTextDocumentParams(
            VersionedTextDocumentIdentifier textDocument,
            ImmutableArray<TextDocumentContentChangeEvent> contentChanges
        )
        {
            TextDocument = textDocument;
            ContentChanges = contentChanges;
        }
        /// <summary>
        /// The document that did change. The version number points
        /// to the version after all provided content changes have
        /// been applied.
        /// </summary>
        [DataMember(Name = "textDocument")]
        public VersionedTextDocumentIdentifier TextDocument { get; init; }
        /// <summary>
        /// The actual content changes. The content changes describe single state changes
        /// to the document. So if there are two content changes c1 (at array index 0) and
        /// c2 (at array index 1) for a document in state S then c1 moves the document from
        /// S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
        /// on the state S'.
        /// 
        /// To mirror the content of a document using change events use the following approach:
        /// - start with the same initial content
        /// - apply the 'textDocument/didChange' notifications in the order you receive them.
        /// - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
        ///   you receive them.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<TextDocumentContentChangeEvent>))]
        [DataMember(Name = "contentChanges")]
        public ImmutableArray<TextDocumentContentChangeEvent> ContentChanges { get; init; }
    }

}
