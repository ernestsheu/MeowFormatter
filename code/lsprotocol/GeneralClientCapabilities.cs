// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// General client capabilities.
    /// 
    /// </summary>
    [Since("3.16.0")]
    [DataContract]
    public record GeneralClientCapabilities
    {
        [JsonConstructor]
        public GeneralClientCapabilities(
            StaleRequestSupportOptions? staleRequestSupport = null,
            RegularExpressionsClientCapabilities? regularExpressions = null,
            MarkdownClientCapabilities? markdown = null,
            ImmutableArray<string> positionEncodings = default!
        )
        {
            StaleRequestSupport = staleRequestSupport;
            RegularExpressions = regularExpressions;
            Markdown = markdown;
            PositionEncodings = positionEncodings;
        }
        /// <summary>
        /// Client capability that signals how the client
        /// handles stale requests (e.g. a request
        /// for which the client will not process the response
        /// anymore since the information is outdated).
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "staleRequestSupport")]
        public StaleRequestSupportOptions? StaleRequestSupport { get; init; }
        /// <summary>
        /// Client capabilities specific to regular expressions.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "regularExpressions")]
        public RegularExpressionsClientCapabilities? RegularExpressions { get; init; }
        /// <summary>
        /// Client capabilities specific to the client's markdown parser.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "markdown")]
        public MarkdownClientCapabilities? Markdown { get; init; }
        /// <summary>
        /// The position encodings supported by the client. Client and server
        /// have to agree on the same position encoding to ensure that offsets
        /// (e.g. character position in a line) are interpreted the same on both
        /// sides.
        /// 
        /// To keep the protocol backwards compatible the following applies: if
        /// the value 'utf-16' is missing from the array of position encodings
        /// servers can assume that the client supports UTF-16. UTF-16 is
        /// therefore a mandatory encoding.
        /// 
        /// If omitted it defaults to ['utf-16'].
        /// 
        /// Implementation considerations: since the conversion from one encoding
        /// into another requires the content of the file / line the conversion
        /// is best done where the file is read which is usually on the server
        /// side.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonConverter(typeof(CustomArrayConverter<string>))]
        [DataMember(Name = "positionEncodings")]
        public ImmutableArray<string> PositionEncodings { get; init; }
    }

}
