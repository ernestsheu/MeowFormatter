// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Completion client capabilities
    /// </summary>
    [DataContract]
    public record CompletionClientCapabilities
    {
        [JsonConstructor]
        public CompletionClientCapabilities(
            bool? dynamicRegistration = null,
            ClientCompletionItemOptions? completionItem = null,
            ClientCompletionItemOptionsKind? completionItemKind = null,
            InsertTextMode? insertTextMode = null,
            bool? contextSupport = null,
            CompletionListCapabilities? completionList = null
        )
        {
            DynamicRegistration = dynamicRegistration;
            CompletionItem = completionItem;
            CompletionItemKind = completionItemKind;
            InsertTextMode = insertTextMode;
            ContextSupport = contextSupport;
            CompletionList = completionList;
        }
        /// <summary>
        /// Whether completion supports dynamic registration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "dynamicRegistration")]
        public bool? DynamicRegistration { get; init; }
        /// <summary>
        /// The client supports the following `CompletionItem` specific
        /// capabilities.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "completionItem")]
        public ClientCompletionItemOptions? CompletionItem { get; init; }
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "completionItemKind")]
        public ClientCompletionItemOptionsKind? CompletionItemKind { get; init; }
        /// <summary>
        /// Defines how the client handles whitespace and indentation
        /// when accepting a completion item that uses multi line
        /// text in either `insertText` or `textEdit`.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "insertTextMode")]
        public InsertTextMode? InsertTextMode { get; init; }
        /// <summary>
        /// The client supports to send additional context information for a
        /// `textDocument/completion` request.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "contextSupport")]
        public bool? ContextSupport { get; init; }
        /// <summary>
        /// The client supports the following `CompletionList` specific
        /// capabilities.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "completionList")]
        public CompletionListCapabilities? CompletionList { get; init; }
    }

}
