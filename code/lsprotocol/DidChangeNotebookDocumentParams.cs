// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// The params sent in a change notebook document notification.
    /// 
    /// </summary>
    [Since("3.17.0")]
    [DataContract]
    public record DidChangeNotebookDocumentParams
    {
        [JsonConstructor]
        public DidChangeNotebookDocumentParams(
            VersionedNotebookDocumentIdentifier notebookDocument,
            NotebookDocumentChangeEvent change
        )
        {
            NotebookDocument = notebookDocument;
            Change = change;
        }
        /// <summary>
        /// The notebook document that did change. The version number points
        /// to the version after all provided changes have been applied. If
        /// only the text document content of a cell changes the notebook version
        /// doesn't necessarily have to change.
        /// </summary>
        [DataMember(Name = "notebookDocument")]
        public VersionedNotebookDocumentIdentifier NotebookDocument { get; init; }
        /// <summary>
        /// The actual changes to the notebook document.
        /// 
        /// The changes describe single state changes to the notebook document.
        /// So if there are two changes c1 (at array index 0) and c2 (at array
        /// index 1) for a notebook in state S then c1 moves the notebook from
        /// S to S' and c2 from S' to S''. So c1 is computed on the state S and
        /// c2 is computed on the state S'.
        /// 
        /// To mirror the content of a notebook using change events use the following approach:
        /// - start with the same initial content
        /// - apply the 'notebookDocument/didChange' notifications in the order you receive them.
        /// - apply the `NotebookChangeEvent`s in a single notification in the order
        ///   you receive them.
        /// </summary>
        [DataMember(Name = "change")]
        public NotebookDocumentChangeEvent Change { get; init; }
    }

}
