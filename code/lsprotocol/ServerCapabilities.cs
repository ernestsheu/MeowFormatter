// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Defines the capabilities provided by a language
    /// server.
    /// </summary>
    [DataContract]
    public record ServerCapabilities
    {
        [JsonConstructor]
        public ServerCapabilities(
            string? positionEncoding = null,
            OrType<TextDocumentSyncOptions, TextDocumentSyncKind>? textDocumentSync = null,
            OrType<NotebookDocumentSyncOptions, NotebookDocumentSyncRegistrationOptions>? notebookDocumentSync = null,
            CompletionOptions? completionProvider = null,
            OrType<bool, HoverOptions>? hoverProvider = null,
            SignatureHelpOptions? signatureHelpProvider = null,
            OrType<bool, DeclarationOptions, DeclarationRegistrationOptions>? declarationProvider = null,
            OrType<bool, DefinitionOptions>? definitionProvider = null,
            OrType<bool, TypeDefinitionOptions, TypeDefinitionRegistrationOptions>? typeDefinitionProvider = null,
            OrType<bool, ImplementationOptions, ImplementationRegistrationOptions>? implementationProvider = null,
            OrType<bool, ReferenceOptions>? referencesProvider = null,
            OrType<bool, DocumentHighlightOptions>? documentHighlightProvider = null,
            OrType<bool, DocumentSymbolOptions>? documentSymbolProvider = null,
            OrType<bool, CodeActionOptions>? codeActionProvider = null,
            CodeLensOptions? codeLensProvider = null,
            DocumentLinkOptions? documentLinkProvider = null,
            OrType<bool, DocumentColorOptions, DocumentColorRegistrationOptions>? colorProvider = null,
            OrType<bool, WorkspaceSymbolOptions>? workspaceSymbolProvider = null,
            OrType<bool, DocumentFormattingOptions>? documentFormattingProvider = null,
            OrType<bool, DocumentRangeFormattingOptions>? documentRangeFormattingProvider = null,
            DocumentOnTypeFormattingOptions? documentOnTypeFormattingProvider = null,
            OrType<bool, RenameOptions>? renameProvider = null,
            OrType<bool, FoldingRangeOptions, FoldingRangeRegistrationOptions>? foldingRangeProvider = null,
            OrType<bool, SelectionRangeOptions, SelectionRangeRegistrationOptions>? selectionRangeProvider = null,
            ExecuteCommandOptions? executeCommandProvider = null,
            OrType<bool, CallHierarchyOptions, CallHierarchyRegistrationOptions>? callHierarchyProvider = null,
            OrType<bool, LinkedEditingRangeOptions, LinkedEditingRangeRegistrationOptions>? linkedEditingRangeProvider = null,
            OrType<SemanticTokensOptions, SemanticTokensRegistrationOptions>? semanticTokensProvider = null,
            OrType<bool, MonikerOptions, MonikerRegistrationOptions>? monikerProvider = null,
            OrType<bool, TypeHierarchyOptions, TypeHierarchyRegistrationOptions>? typeHierarchyProvider = null,
            OrType<bool, InlineValueOptions, InlineValueRegistrationOptions>? inlineValueProvider = null,
            OrType<bool, InlayHintOptions, InlayHintRegistrationOptions>? inlayHintProvider = null,
            OrType<DiagnosticOptions, DiagnosticRegistrationOptions>? diagnosticProvider = null,
            OrType<bool, InlineCompletionOptions>? inlineCompletionProvider = null,
            WorkspaceOptions? workspace = null,
            LSPAny? experimental = null
        )
        {
            PositionEncoding = positionEncoding;
            TextDocumentSync = textDocumentSync;
            NotebookDocumentSync = notebookDocumentSync;
            CompletionProvider = completionProvider;
            HoverProvider = hoverProvider;
            SignatureHelpProvider = signatureHelpProvider;
            DeclarationProvider = declarationProvider;
            DefinitionProvider = definitionProvider;
            TypeDefinitionProvider = typeDefinitionProvider;
            ImplementationProvider = implementationProvider;
            ReferencesProvider = referencesProvider;
            DocumentHighlightProvider = documentHighlightProvider;
            DocumentSymbolProvider = documentSymbolProvider;
            CodeActionProvider = codeActionProvider;
            CodeLensProvider = codeLensProvider;
            DocumentLinkProvider = documentLinkProvider;
            ColorProvider = colorProvider;
            WorkspaceSymbolProvider = workspaceSymbolProvider;
            DocumentFormattingProvider = documentFormattingProvider;
            DocumentRangeFormattingProvider = documentRangeFormattingProvider;
            DocumentOnTypeFormattingProvider = documentOnTypeFormattingProvider;
            RenameProvider = renameProvider;
            FoldingRangeProvider = foldingRangeProvider;
            SelectionRangeProvider = selectionRangeProvider;
            ExecuteCommandProvider = executeCommandProvider;
            CallHierarchyProvider = callHierarchyProvider;
            LinkedEditingRangeProvider = linkedEditingRangeProvider;
            SemanticTokensProvider = semanticTokensProvider;
            MonikerProvider = monikerProvider;
            TypeHierarchyProvider = typeHierarchyProvider;
            InlineValueProvider = inlineValueProvider;
            InlayHintProvider = inlayHintProvider;
            DiagnosticProvider = diagnosticProvider;
            InlineCompletionProvider = inlineCompletionProvider;
            Workspace = workspace;
            Experimental = experimental;
        }
        /// <summary>
        /// The position encoding the server picked from the encodings offered
        /// by the client via the client capability `general.positionEncodings`.
        /// 
        /// If the client didn't provide any position encodings the only valid
        /// value that a server can return is 'utf-16'.
        /// 
        /// If omitted it defaults to 'utf-16'.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "positionEncoding")]
        public string? PositionEncoding { get; init; }
        /// <summary>
        /// Defines how text documents are synced. Is either a detailed structure
        /// defining each notification or for backwards compatibility the
        /// TextDocumentSyncKind number.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<TextDocumentSyncOptions, TextDocumentSyncKind>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "textDocumentSync")]
        public OrType<TextDocumentSyncOptions, TextDocumentSyncKind>? TextDocumentSync { get; init; }
        /// <summary>
        /// Defines how notebook documents are synced.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonConverter(typeof(OrTypeConverter<NotebookDocumentSyncOptions, NotebookDocumentSyncRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "notebookDocumentSync")]
        public OrType<NotebookDocumentSyncOptions, NotebookDocumentSyncRegistrationOptions>? NotebookDocumentSync { get; init; }
        /// <summary>
        /// The server provides completion support.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "completionProvider")]
        public CompletionOptions? CompletionProvider { get; init; }
        /// <summary>
        /// The server provides hover support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, HoverOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "hoverProvider")]
        public OrType<bool, HoverOptions>? HoverProvider { get; init; }
        /// <summary>
        /// The server provides signature help support.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "signatureHelpProvider")]
        public SignatureHelpOptions? SignatureHelpProvider { get; init; }
        /// <summary>
        /// The server provides Goto Declaration support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, DeclarationOptions, DeclarationRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "declarationProvider")]
        public OrType<bool, DeclarationOptions, DeclarationRegistrationOptions>? DeclarationProvider { get; init; }
        /// <summary>
        /// The server provides goto definition support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, DefinitionOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "definitionProvider")]
        public OrType<bool, DefinitionOptions>? DefinitionProvider { get; init; }
        /// <summary>
        /// The server provides Goto Type Definition support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, TypeDefinitionOptions, TypeDefinitionRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "typeDefinitionProvider")]
        public OrType<bool, TypeDefinitionOptions, TypeDefinitionRegistrationOptions>? TypeDefinitionProvider { get; init; }
        /// <summary>
        /// The server provides Goto Implementation support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, ImplementationOptions, ImplementationRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "implementationProvider")]
        public OrType<bool, ImplementationOptions, ImplementationRegistrationOptions>? ImplementationProvider { get; init; }
        /// <summary>
        /// The server provides find references support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, ReferenceOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "referencesProvider")]
        public OrType<bool, ReferenceOptions>? ReferencesProvider { get; init; }
        /// <summary>
        /// The server provides document highlight support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, DocumentHighlightOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentHighlightProvider")]
        public OrType<bool, DocumentHighlightOptions>? DocumentHighlightProvider { get; init; }
        /// <summary>
        /// The server provides document symbol support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, DocumentSymbolOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentSymbolProvider")]
        public OrType<bool, DocumentSymbolOptions>? DocumentSymbolProvider { get; init; }
        /// <summary>
        /// The server provides code actions. CodeActionOptions may only be
        /// specified if the client states that it supports
        /// `codeActionLiteralSupport` in its initial `initialize` request.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, CodeActionOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "codeActionProvider")]
        public OrType<bool, CodeActionOptions>? CodeActionProvider { get; init; }
        /// <summary>
        /// The server provides code lens.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "codeLensProvider")]
        public CodeLensOptions? CodeLensProvider { get; init; }
        /// <summary>
        /// The server provides document link support.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentLinkProvider")]
        public DocumentLinkOptions? DocumentLinkProvider { get; init; }
        /// <summary>
        /// The server provides color provider support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, DocumentColorOptions, DocumentColorRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "colorProvider")]
        public OrType<bool, DocumentColorOptions, DocumentColorRegistrationOptions>? ColorProvider { get; init; }
        /// <summary>
        /// The server provides workspace symbol support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, WorkspaceSymbolOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "workspaceSymbolProvider")]
        public OrType<bool, WorkspaceSymbolOptions>? WorkspaceSymbolProvider { get; init; }
        /// <summary>
        /// The server provides document formatting.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, DocumentFormattingOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentFormattingProvider")]
        public OrType<bool, DocumentFormattingOptions>? DocumentFormattingProvider { get; init; }
        /// <summary>
        /// The server provides document range formatting.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, DocumentRangeFormattingOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentRangeFormattingProvider")]
        public OrType<bool, DocumentRangeFormattingOptions>? DocumentRangeFormattingProvider { get; init; }
        /// <summary>
        /// The server provides document formatting on typing.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentOnTypeFormattingProvider")]
        public DocumentOnTypeFormattingOptions? DocumentOnTypeFormattingProvider { get; init; }
        /// <summary>
        /// The server provides rename support. RenameOptions may only be
        /// specified if the client states that it supports
        /// `prepareSupport` in its initial `initialize` request.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, RenameOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "renameProvider")]
        public OrType<bool, RenameOptions>? RenameProvider { get; init; }
        /// <summary>
        /// The server provides folding provider support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, FoldingRangeOptions, FoldingRangeRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "foldingRangeProvider")]
        public OrType<bool, FoldingRangeOptions, FoldingRangeRegistrationOptions>? FoldingRangeProvider { get; init; }
        /// <summary>
        /// The server provides selection range support.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<bool, SelectionRangeOptions, SelectionRangeRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "selectionRangeProvider")]
        public OrType<bool, SelectionRangeOptions, SelectionRangeRegistrationOptions>? SelectionRangeProvider { get; init; }
        /// <summary>
        /// The server provides execute command support.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "executeCommandProvider")]
        public ExecuteCommandOptions? ExecuteCommandProvider { get; init; }
        /// <summary>
        /// The server provides call hierarchy support.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonConverter(typeof(OrTypeConverter<bool, CallHierarchyOptions, CallHierarchyRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "callHierarchyProvider")]
        public OrType<bool, CallHierarchyOptions, CallHierarchyRegistrationOptions>? CallHierarchyProvider { get; init; }
        /// <summary>
        /// The server provides linked editing range support.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonConverter(typeof(OrTypeConverter<bool, LinkedEditingRangeOptions, LinkedEditingRangeRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "linkedEditingRangeProvider")]
        public OrType<bool, LinkedEditingRangeOptions, LinkedEditingRangeRegistrationOptions>? LinkedEditingRangeProvider { get; init; }
        /// <summary>
        /// The server provides semantic tokens support.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonConverter(typeof(OrTypeConverter<SemanticTokensOptions, SemanticTokensRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "semanticTokensProvider")]
        public OrType<SemanticTokensOptions, SemanticTokensRegistrationOptions>? SemanticTokensProvider { get; init; }
        /// <summary>
        /// The server provides moniker support.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonConverter(typeof(OrTypeConverter<bool, MonikerOptions, MonikerRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "monikerProvider")]
        public OrType<bool, MonikerOptions, MonikerRegistrationOptions>? MonikerProvider { get; init; }
        /// <summary>
        /// The server provides type hierarchy support.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonConverter(typeof(OrTypeConverter<bool, TypeHierarchyOptions, TypeHierarchyRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "typeHierarchyProvider")]
        public OrType<bool, TypeHierarchyOptions, TypeHierarchyRegistrationOptions>? TypeHierarchyProvider { get; init; }
        /// <summary>
        /// The server provides inline values.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonConverter(typeof(OrTypeConverter<bool, InlineValueOptions, InlineValueRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "inlineValueProvider")]
        public OrType<bool, InlineValueOptions, InlineValueRegistrationOptions>? InlineValueProvider { get; init; }
        /// <summary>
        /// The server provides inlay hints.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonConverter(typeof(OrTypeConverter<bool, InlayHintOptions, InlayHintRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "inlayHintProvider")]
        public OrType<bool, InlayHintOptions, InlayHintRegistrationOptions>? InlayHintProvider { get; init; }
        /// <summary>
        /// The server has support for pull model diagnostics.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonConverter(typeof(OrTypeConverter<DiagnosticOptions, DiagnosticRegistrationOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "diagnosticProvider")]
        public OrType<DiagnosticOptions, DiagnosticRegistrationOptions>? DiagnosticProvider { get; init; }
        /// <summary>
        /// Inline completion options used during static registration.
        /// 
        /// </summary>
        [Proposed]
        [Since("3.18.0")]
        [JsonConverter(typeof(OrTypeConverter<bool, InlineCompletionOptions>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "inlineCompletionProvider")]
        public OrType<bool, InlineCompletionOptions>? InlineCompletionProvider { get; init; }
        /// <summary>
        /// Workspace specific server capabilities.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "workspace")]
        public WorkspaceOptions? Workspace { get; init; }
        /// <summary>
        /// Experimental server capabilities.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "experimental")]
        public LSPAny? Experimental { get; init; }
    }

}
