// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Represents the signature of something callable. A signature
    /// can have a label, like a function-name, a doc-comment, and
    /// a set of parameters.
    /// </summary>
    [DataContract]
    public record SignatureInformation
    {
        [JsonConstructor]
        public SignatureInformation(
            string label,
            OrType<string, MarkupContent>? documentation = null,
            ImmutableArray<ParameterInformation> parameters = default!,
            long? activeParameter = null
        )
        {
            Label = label;
            Documentation = documentation;
            Parameters = parameters;
            ActiveParameter = activeParameter;
        }
        /// <summary>
        /// The label of this signature. Will be shown in
        /// the UI.
        /// </summary>
        [DataMember(Name = "label")]
        public string Label { get; init; }
        /// <summary>
        /// The human-readable doc-comment of this signature. Will be shown
        /// in the UI but can be omitted.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<string, MarkupContent>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentation")]
        public OrType<string, MarkupContent>? Documentation { get; init; }
        /// <summary>
        /// The parameters of this signature.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<ParameterInformation>))]
        [DataMember(Name = "parameters")]
        public ImmutableArray<ParameterInformation> Parameters { get; init; }
        /// <summary>
        /// The index of the active parameter.
        /// 
        /// If `null`, no parameter of the signature is active (for example a named
        /// argument that does not match any declared parameters). This is only valid
        /// if the client specifies the client capability
        /// `textDocument.signatureHelp.noActiveParameterSupport === true`
        /// 
        /// If provided (or `null`), this is used in place of
        /// `SignatureHelp.activeParameter`.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [DataMember(Name = "activeParameter")]
        public long? ActiveParameter { get; init; }
    }

}
