// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// The glob pattern to watch relative to the base path. Glob patterns can have the following syntax:
    /// - `*` to match one or more characters in a path segment
    /// - `?` to match on one character in a path segment
    /// - `**` to match any number of path segments, including none
    /// - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
    /// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
    /// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
    /// 
    /// </summary>
    [Since("3.17.0")]
    [JsonConverter(typeof(CustomStringConverter<Pattern>))]
    [DataContract]
    public record Pattern
    {
        private string pattern;
        public Pattern(string value){pattern = value;}
        public static implicit operator Pattern(string value) => new Pattern(value);
        public static implicit operator string(Pattern pattern) => pattern.pattern;
        public override string ToString() => pattern;
    }

}
