// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Contains additional diagnostic information about the context in which
    /// a <see cref="CodeActionProvider.provideCodeActions">code action</see> is run.
    /// </summary>
    [DataContract]
    public record CodeActionContext
    {
        [JsonConstructor]
        public CodeActionContext(
            ImmutableArray<Diagnostic> diagnostics,
            ImmutableArray<string> only = default!,
            CodeActionTriggerKind? triggerKind = null
        )
        {
            Diagnostics = diagnostics;
            Only = only;
            TriggerKind = triggerKind;
        }
        /// <summary>
        /// An array of diagnostics known on the client side overlapping the range provided to the
        /// `textDocument/codeAction` request. They are provided so that the server knows which
        /// errors are currently presented to the user for the given range. There is no guarantee
        /// that these accurately reflect the error state of the resource. The primary parameter
        /// to compute code actions is the provided range.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<Diagnostic>))]
        [DataMember(Name = "diagnostics")]
        public ImmutableArray<Diagnostic> Diagnostics { get; init; }
        /// <summary>
        /// Requested kind of actions to return.
        /// 
        /// Actions not of this kind are filtered out by the client before being shown. So servers
        /// can omit computing them.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<string>))]
        [DataMember(Name = "only")]
        public ImmutableArray<string> Only { get; init; }
        /// <summary>
        /// The reason why code actions were requested.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "triggerKind")]
        public CodeActionTriggerKind? TriggerKind { get; init; }
    }

}
