// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// The Client Capabilities of a <see cref="CodeActionRequest" />.
    /// </summary>
    [DataContract]
    public record CodeActionClientCapabilities
    {
        [JsonConstructor]
        public CodeActionClientCapabilities(
            bool? dynamicRegistration = null,
            ClientCodeActionLiteralOptions? codeActionLiteralSupport = null,
            bool? isPreferredSupport = null,
            bool? disabledSupport = null,
            bool? dataSupport = null,
            ClientCodeActionResolveOptions? resolveSupport = null,
            bool? honorsChangeAnnotations = null,
            bool? documentationSupport = null
        )
        {
            DynamicRegistration = dynamicRegistration;
            CodeActionLiteralSupport = codeActionLiteralSupport;
            IsPreferredSupport = isPreferredSupport;
            DisabledSupport = disabledSupport;
            DataSupport = dataSupport;
            ResolveSupport = resolveSupport;
            HonorsChangeAnnotations = honorsChangeAnnotations;
            DocumentationSupport = documentationSupport;
        }
        /// <summary>
        /// Whether code action supports dynamic registration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "dynamicRegistration")]
        public bool? DynamicRegistration { get; init; }
        /// <summary>
        /// The client support code action literals of type `CodeAction` as a valid
        /// response of the `textDocument/codeAction` request. If the property is not
        /// set the request can only return `Command` literals.
        /// 
        /// </summary>
        [Since("3.8.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "codeActionLiteralSupport")]
        public ClientCodeActionLiteralOptions? CodeActionLiteralSupport { get; init; }
        /// <summary>
        /// Whether code action supports the `isPreferred` property.
        /// 
        /// </summary>
        [Since("3.15.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "isPreferredSupport")]
        public bool? IsPreferredSupport { get; init; }
        /// <summary>
        /// Whether code action supports the `disabled` property.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "disabledSupport")]
        public bool? DisabledSupport { get; init; }
        /// <summary>
        /// Whether code action supports the `data` property which is
        /// preserved between a `textDocument/codeAction` and a
        /// `codeAction/resolve` request.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "dataSupport")]
        public bool? DataSupport { get; init; }
        /// <summary>
        /// Whether the client supports resolving additional code action
        /// properties via a separate `codeAction/resolve` request.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "resolveSupport")]
        public ClientCodeActionResolveOptions? ResolveSupport { get; init; }
        /// <summary>
        /// Whether the client honors the change annotations in
        /// text edits and resource operations returned via the
        /// `CodeAction#edit` property by for example presenting
        /// the workspace edit in the user interface and asking
        /// for confirmation.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "honorsChangeAnnotations")]
        public bool? HonorsChangeAnnotations { get; init; }
        /// <summary>
        /// Whether the client supports documentation for a class of
        /// code actions.
        /// 
        /// </summary>
        [Proposed]
        [Since("3.18.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentationSupport")]
        public bool? DocumentationSupport { get; init; }
    }

}
