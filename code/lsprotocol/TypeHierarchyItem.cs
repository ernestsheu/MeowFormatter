// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// </summary>
    [Since("3.17.0")]
    [DataContract]
    public record TypeHierarchyItem
    {
        [JsonConstructor]
        public TypeHierarchyItem(
            string name,
            SymbolKind kind,
            Uri uri,
            Range range,
            Range selectionRange,
            ImmutableArray<SymbolTag> tags = default!,
            string? detail = null,
            LSPAny? data = null
        )
        {
            Name = name;
            Kind = kind;
            Tags = tags;
            Detail = detail;
            Uri = uri;
            Range = range;
            SelectionRange = selectionRange;
            Data = data;
        }
        /// <summary>
        /// The name of this item.
        /// </summary>
        [DataMember(Name = "name")]
        public string Name { get; init; }
        /// <summary>
        /// The kind of this item.
        /// </summary>
        [DataMember(Name = "kind")]
        public SymbolKind Kind { get; init; }
        /// <summary>
        /// Tags for this item.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<SymbolTag>))]
        [DataMember(Name = "tags")]
        public ImmutableArray<SymbolTag> Tags { get; init; }
        /// <summary>
        /// More detail for this item, e.g. the signature of a function.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "detail")]
        public string? Detail { get; init; }
        /// <summary>
        /// The resource identifier of this item.
        /// </summary>
        [JsonConverter(typeof(CustomStringConverter<Uri>))]
        [DataMember(Name = "uri")]
        public Uri Uri { get; init; }
        /// <summary>
        /// The range enclosing this symbol not including leading/trailing whitespace
        /// but everything else, e.g. comments and code.
        /// </summary>
        [DataMember(Name = "range")]
        public Range Range { get; init; }
        /// <summary>
        /// The range that should be selected and revealed when this symbol is being
        /// picked, e.g. the name of a function. Must be contained by the
        /// <see cref="TypeHierarchyItem.range">`range`</see>.
        /// </summary>
        [DataMember(Name = "selectionRange")]
        public Range SelectionRange { get; init; }
        /// <summary>
        /// A data entry field that is preserved between a type hierarchy prepare and
        /// supertypes or subtypes requests. It could also be used to identify the
        /// type hierarchy in the server, helping improve the performance on
        /// resolving supertypes and subtypes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "data")]
        public LSPAny? Data { get; init; }
    }

}
