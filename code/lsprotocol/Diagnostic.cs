// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Represents a diagnostic, such as a compiler error or warning. Diagnostic objects
    /// are only valid in the scope of a resource.
    /// </summary>
    [DataContract]
    public record Diagnostic
    {
        [JsonConstructor]
        public Diagnostic(
            Range range,
            string message,
            DiagnosticSeverity? severity = null,
            OrType<int, string>? code = null,
            CodeDescription? codeDescription = null,
            string? source = null,
            ImmutableArray<DiagnosticTag> tags = default!,
            ImmutableArray<DiagnosticRelatedInformation> relatedInformation = default!,
            LSPAny? data = null
        )
        {
            Range = range;
            Severity = severity;
            Code = code;
            CodeDescription = codeDescription;
            Source = source;
            Message = message;
            Tags = tags;
            RelatedInformation = relatedInformation;
            Data = data;
        }
        /// <summary>
        /// The range at which the message applies
        /// </summary>
        [DataMember(Name = "range")]
        public Range Range { get; init; }
        /// <summary>
        /// The diagnostic's severity. Can be omitted. If omitted it is up to the
        /// client to interpret diagnostics as error, warning, info or hint.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "severity")]
        public DiagnosticSeverity? Severity { get; init; }
        /// <summary>
        /// The diagnostic's code, which usually appear in the user interface.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<int, string>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "code")]
        public OrType<int, string>? Code { get; init; }
        /// <summary>
        /// An optional property to describe the error code.
        /// Requires the code field (above) to be present/not null.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "codeDescription")]
        public CodeDescription? CodeDescription { get; init; }
        /// <summary>
        /// A human-readable string describing the source of this
        /// diagnostic, e.g. 'typescript' or 'super lint'. It usually
        /// appears in the user interface.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "source")]
        public string? Source { get; init; }
        /// <summary>
        /// The diagnostic's message. It usually appears in the user interface
        /// </summary>
        [DataMember(Name = "message")]
        public string Message { get; init; }
        /// <summary>
        /// Additional metadata about the diagnostic.
        /// 
        /// </summary>
        [Since("3.15.0")]
        [JsonConverter(typeof(CustomArrayConverter<DiagnosticTag>))]
        [DataMember(Name = "tags")]
        public ImmutableArray<DiagnosticTag> Tags { get; init; }
        /// <summary>
        /// An array of related diagnostic information, e.g. when symbol-names within
        /// a scope collide all definitions can be marked via this property.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<DiagnosticRelatedInformation>))]
        [DataMember(Name = "relatedInformation")]
        public ImmutableArray<DiagnosticRelatedInformation> RelatedInformation { get; init; }
        /// <summary>
        /// A data entry field that is preserved between a `textDocument/publishDiagnostics`
        /// notification and `textDocument/codeAction` request.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "data")]
        public LSPAny? Data { get; init; }
    }

}
