// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    [DataContract]
    public record FoldingRangeClientCapabilities
    {
        [JsonConstructor]
        public FoldingRangeClientCapabilities(
            bool? dynamicRegistration = null,
            long? rangeLimit = null,
            bool? lineFoldingOnly = null,
            ClientFoldingRangeKindOptions? foldingRangeKind = null,
            ClientFoldingRangeOptions? foldingRange = null
        )
        {
            DynamicRegistration = dynamicRegistration;
            RangeLimit = rangeLimit;
            LineFoldingOnly = lineFoldingOnly;
            FoldingRangeKind = foldingRangeKind;
            FoldingRange = foldingRange;
        }
        /// <summary>
        /// Whether implementation supports dynamic registration for folding range
        /// providers. If this is set to `true` the client supports the new
        /// `FoldingRangeRegistrationOptions` return value for the corresponding
        /// server capability as well.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "dynamicRegistration")]
        public bool? DynamicRegistration { get; init; }
        /// <summary>
        /// The maximum number of folding ranges that the client prefers to receive
        /// per document. The value serves as a hint, servers are free to follow the
        /// limit.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "rangeLimit")]
        public long? RangeLimit { get => rangeLimit; set => rangeLimit = Validators.validUInteger(value); }
        private long? rangeLimit;
        /// <summary>
        /// If set, the client signals that it only supports folding complete lines.
        /// If set, client will ignore specified `startCharacter` and `endCharacter`
        /// properties in a FoldingRange.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "lineFoldingOnly")]
        public bool? LineFoldingOnly { get; init; }
        /// <summary>
        /// Specific options for the folding range kind.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "foldingRangeKind")]
        public ClientFoldingRangeKindOptions? FoldingRangeKind { get; init; }
        /// <summary>
        /// Specific options for the folding range.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "foldingRange")]
        public ClientFoldingRangeOptions? FoldingRange { get; init; }
    }

}
