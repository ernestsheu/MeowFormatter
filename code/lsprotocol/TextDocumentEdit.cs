// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Describes textual changes on a text document. A TextDocumentEdit describes all changes
    /// on a document version Si and after they are applied move the document to version Si+1.
    /// So the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any
    /// kind of ordering. However the edits must be non overlapping.
    /// </summary>
    [DataContract]
    public record TextDocumentEdit
    {
        [JsonConstructor]
        public TextDocumentEdit(
            OptionalVersionedTextDocumentIdentifier textDocument,
            ImmutableArray<OrType<TextEdit, AnnotatedTextEdit>> edits
        )
        {
            TextDocument = textDocument;
            Edits = edits;
        }
        /// <summary>
        /// The text document to change.
        /// </summary>
        [DataMember(Name = "textDocument")]
        public OptionalVersionedTextDocumentIdentifier TextDocument { get; init; }
        /// <summary>
        /// The edits to be applied.
        /// 
        /// client capability.
        /// </summary>
        [Since("3.16.0 - support for AnnotatedTextEdit. This is guarded using aclient capability.")]
        [JsonConverter(typeof(OrTypeArrayConverter<TextEdit, AnnotatedTextEdit>))]
        [DataMember(Name = "edits")]
        public ImmutableArray<OrType<TextEdit, AnnotatedTextEdit>> Edits { get; init; }
    }

}
