// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    [DataContract]
    public record InitializeParams
    {
        [JsonConstructor]
        public InitializeParams(
            ClientCapabilities capabilities,
            int? processId = null,
            ClientInfo? clientInfo = null,
            string? locale = null,
            string? rootPath = null,
            Uri? rootUri = null,
            LSPAny? initializationOptions = null,
            TraceValue? trace = null,
            ProgressToken? workDoneToken = null,
            ImmutableArray<WorkspaceFolder> workspaceFolders = default!
        )
        {
            ProcessId = processId;
            ClientInfo = clientInfo;
            Locale = locale;
            RootPath = rootPath;
            RootUri = rootUri;
            Capabilities = capabilities;
            InitializationOptions = initializationOptions;
            Trace = trace;
            WorkDoneToken = workDoneToken;
            WorkspaceFolders = workspaceFolders;
        }
        /// <summary>
        /// The process Id of the parent process that started
        /// the server.
        /// 
        /// Is `null` if the process has not been started by another process.
        /// If the parent process is not alive then the server should exit.
        /// </summary>
        [DataMember(Name = "processId")]
        public int? ProcessId { get; init; }
        /// <summary>
        /// Information about the client
        /// 
        /// </summary>
        [Since("3.15.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "clientInfo")]
        public ClientInfo? ClientInfo { get; init; }
        /// <summary>
        /// The locale the client is currently showing the user interface
        /// in. This must not necessarily be the locale of the operating
        /// system.
        /// 
        /// Uses IETF language tags as the value's syntax
        /// (See https://en.wikipedia.org/wiki/IETF_language_tag)
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "locale")]
        public string? Locale { get; init; }
        /// <summary>
        /// The rootPath of the workspace. Is null
        /// if no folder is open.
        /// 
        /// </summary>
        [Obsolete("in favour of rootUri.")]
        [DataMember(Name = "rootPath")]
        public string? RootPath { get; init; }
        /// <summary>
        /// The rootUri of the workspace. Is null if no
        /// folder is open. If both `rootPath` and `rootUri` are set
        /// `rootUri` wins.
        /// 
        /// </summary>
        [Obsolete("in favour of workspaceFolders.")]
        [JsonConverter(typeof(CustomStringConverter<Uri>))]
        [DataMember(Name = "rootUri")]
        public Uri? RootUri { get; init; }
        /// <summary>
        /// The capabilities provided by the client (editor or tool)
        /// </summary>
        [DataMember(Name = "capabilities")]
        public ClientCapabilities Capabilities { get; init; }
        /// <summary>
        /// User provided initialization options.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "initializationOptions")]
        public LSPAny? InitializationOptions { get; init; }
        /// <summary>
        /// The initial trace setting. If omitted trace is disabled ('off').
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "trace")]
        public TraceValue? Trace { get; init; }
        /// <summary>
        /// An optional token that a server can use to report work done progress.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "workDoneToken")]
        public ProgressToken? WorkDoneToken { get; init; }
        /// <summary>
        /// The workspace folders configured in the client when the server starts.
        /// 
        /// This property is only available if the client supports workspace folders.
        /// It can be `null` if the client supports workspace folders but none are
        /// configured.
        /// 
        /// </summary>
        [Since("3.6.0")]
        [JsonConverter(typeof(CustomArrayConverter<WorkspaceFolder>))]
        [DataMember(Name = "workspaceFolders")]
        public ImmutableArray<WorkspaceFolder> WorkspaceFolders { get; init; }
    }

}
