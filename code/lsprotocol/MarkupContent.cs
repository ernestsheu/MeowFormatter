// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// A `MarkupContent` literal represents a string value which content is interpreted base on its
    /// kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.
    /// 
    /// If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.
    /// See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting
    /// 
    /// Here is an example how such a string can be constructed using JavaScript / TypeScript:
    /// ```ts
    /// let markdown: MarkdownContent = {
    ///  kind: MarkupKind.Markdown,
    ///  value: [
    ///    '# Header',
    ///    'Some text',
    ///    '```typescript',
    ///    'someCode();',
    ///    '```'
    ///  ].join('\n')
    /// };
    /// ```
    /// 
    /// *Please Note* that clients might sanitize the return markdown. A client could decide to
    /// remove HTML from the markdown to avoid script execution.
    /// </summary>
    [DataContract]
    public record MarkupContent
    {
        [JsonConstructor]
        public MarkupContent(
            MarkupKind kind,
            string value
        )
        {
            Kind = kind;
            Value = value;
        }
        /// <summary>
        /// The type of the Markup
        /// </summary>
        [DataMember(Name = "kind")]
        public MarkupKind Kind { get; init; }
        /// <summary>
        /// The content itself
        /// </summary>
        [DataMember(Name = "value")]
        public string Value { get; init; }
    }

}
