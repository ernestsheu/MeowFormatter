// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;

namespace Microsoft.LanguageServer.Protocol {
    public class ProgressTokenConverter : JsonConverter<ProgressToken>
    {
    private OrTypeConverter<int,string> _orType;
    public ProgressTokenConverter()
    {
    _orType = new OrTypeConverter<int,string>();
    }
    public override ProgressToken? ReadJson(JsonReader reader, Type objectType, ProgressToken? existingValue, bool hasExistingValue, JsonSerializer serializer)
    {
    reader = reader ?? throw new ArgumentNullException(nameof(reader));
    if (reader.TokenType == JsonToken.Null) { return null; }
    var o = _orType.ReadJson(reader, objectType, existingValue, serializer);
    if (o is OrType<int,string> orType)
    {
    if (orType.Value?.GetType() == typeof(int))
    {
    return new ProgressToken((int)orType.Value);
    }
    if (orType.Value?.GetType() == typeof(string))
    {
    return new ProgressToken((string)orType.Value);
    }
    }
    throw new JsonSerializationException($"Unexpected token type.");
    }
    public override void WriteJson(JsonWriter writer, ProgressToken? value, JsonSerializer serializer)
    {
    _orType.WriteJson(writer, value, serializer);
    }
    }
}
