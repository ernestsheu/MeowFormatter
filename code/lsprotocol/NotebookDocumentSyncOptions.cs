// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Options specific to a notebook plus its cells
    /// to be synced to the server.
    /// 
    /// If a selector provides a notebook document
    /// filter but no cell selector all cells of a
    /// matching notebook document will be synced.
    /// 
    /// If a selector provides no notebook document
    /// filter but only a cell selector all notebook
    /// document that contain at least one matching
    /// cell will be synced.
    /// 
    /// </summary>
    [Since("3.17.0")]
    [DataContract]
    public record NotebookDocumentSyncOptions
    {
        [JsonConstructor]
        public NotebookDocumentSyncOptions(
            ImmutableArray<OrType<NotebookDocumentFilterWithNotebook, NotebookDocumentFilterWithCells>> notebookSelector,
            bool? save = null
        )
        {
            NotebookSelector = notebookSelector;
            Save = save;
        }
        /// <summary>
        /// The notebooks to be synced
        /// </summary>
        [JsonConverter(typeof(OrTypeArrayConverter<NotebookDocumentFilterWithNotebook, NotebookDocumentFilterWithCells>))]
        [DataMember(Name = "notebookSelector")]
        public ImmutableArray<OrType<NotebookDocumentFilterWithNotebook, NotebookDocumentFilterWithCells>> NotebookSelector { get; init; }
        /// <summary>
        /// Whether save notification should be forwarded to
        /// the server. Will only be honored if mode === `notebook`.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "save")]
        public bool? Save { get; init; }
    }

}
