// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// A pattern to describe in which file operation requests or notifications
    /// the server is interested in receiving.
    /// 
    /// </summary>
    [Since("3.16.0")]
    [DataContract]
    public record FileOperationPattern
    {
        [JsonConstructor]
        public FileOperationPattern(
            string glob,
            FileOperationPatternKind? matches = null,
            FileOperationPatternOptions? options = null
        )
        {
            Glob = glob;
            Matches = matches;
            Options = options;
        }
        /// <summary>
        /// The glob pattern to match. Glob patterns can have the following syntax:
        /// - `*` to match one or more characters in a path segment
        /// - `?` to match on one character in a path segment
        /// - `**` to match any number of path segments, including none
        /// - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
        /// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
        /// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
        /// </summary>
        [DataMember(Name = "glob")]
        public string Glob { get; init; }
        /// <summary>
        /// Whether to match files or folders with this pattern.
        /// 
        /// Matches both if undefined.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "matches")]
        public FileOperationPatternKind? Matches { get; init; }
        /// <summary>
        /// Additional options used during matching.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "options")]
        public FileOperationPatternOptions? Options { get; init; }
    }

}
