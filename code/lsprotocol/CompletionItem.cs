// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// A completion item represents a text snippet that is
    /// proposed to complete text that is being typed.
    /// </summary>
    [DataContract]
    public record CompletionItem
    {
        [JsonConstructor]
        public CompletionItem(
            string label,
            CompletionItemLabelDetails? labelDetails = null,
            CompletionItemKind? kind = null,
            ImmutableArray<CompletionItemTag> tags = default!,
            string? detail = null,
            OrType<string, MarkupContent>? documentation = null,
            bool? deprecated = null,
            bool? preselect = null,
            string? sortText = null,
            string? filterText = null,
            string? insertText = null,
            InsertTextFormat? insertTextFormat = null,
            InsertTextMode? insertTextMode = null,
            OrType<TextEdit, InsertReplaceEdit>? textEdit = null,
            string? textEditText = null,
            ImmutableArray<TextEdit> additionalTextEdits = default!,
            ImmutableArray<string> commitCharacters = default!,
            CommandAction? command = null,
            LSPAny? data = null
        )
        {
            Label = label;
            LabelDetails = labelDetails;
            Kind = kind;
            Tags = tags;
            Detail = detail;
            Documentation = documentation;
            Deprecated = deprecated;
            Preselect = preselect;
            SortText = sortText;
            FilterText = filterText;
            InsertText = insertText;
            InsertTextFormat = insertTextFormat;
            InsertTextMode = insertTextMode;
            TextEdit = textEdit;
            TextEditText = textEditText;
            AdditionalTextEdits = additionalTextEdits;
            CommitCharacters = commitCharacters;
            Command = command;
            Data = data;
        }
        /// <summary>
        /// The label of this completion item.
        /// 
        /// The label property is also by default the text that
        /// is inserted when selecting this completion.
        /// 
        /// If label details are provided the label itself should
        /// be an unqualified name of the completion item.
        /// </summary>
        [DataMember(Name = "label")]
        public string Label { get; init; }
        /// <summary>
        /// Additional details for the label
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "labelDetails")]
        public CompletionItemLabelDetails? LabelDetails { get; init; }
        /// <summary>
        /// The kind of this completion item. Based of the kind
        /// an icon is chosen by the editor.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "kind")]
        public CompletionItemKind? Kind { get; init; }
        /// <summary>
        /// Tags for this completion item.
        /// 
        /// </summary>
        [Since("3.15.0")]
        [JsonConverter(typeof(CustomArrayConverter<CompletionItemTag>))]
        [DataMember(Name = "tags")]
        public ImmutableArray<CompletionItemTag> Tags { get; init; }
        /// <summary>
        /// A human-readable string with additional information
        /// about this item, like type or symbol information.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "detail")]
        public string? Detail { get; init; }
        /// <summary>
        /// A human-readable string that represents a doc-comment.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<string, MarkupContent>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "documentation")]
        public OrType<string, MarkupContent>? Documentation { get; init; }
        /// <summary>
        /// Indicates if this item is deprecated.
        /// </summary>
        [Obsolete("Use `tags` instead.")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "deprecated")]
        public bool? Deprecated { get; init; }
        /// <summary>
        /// Select this item when showing.
        /// 
        /// *Note* that only one completion item can be selected and that the
        /// tool / client decides which item that is. The rule is that the *first*
        /// item of those that match best is selected.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "preselect")]
        public bool? Preselect { get; init; }
        /// <summary>
        /// A string that should be used when comparing this item
        /// with other items. When `falsy` the <see cref="CompletionItem.label">label</see>
        /// is used.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "sortText")]
        public string? SortText { get; init; }
        /// <summary>
        /// A string that should be used when filtering a set of
        /// completion items. When `falsy` the <see cref="CompletionItem.label">label</see>
        /// is used.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "filterText")]
        public string? FilterText { get; init; }
        /// <summary>
        /// A string that should be inserted into a document when selecting
        /// this completion. When `falsy` the <see cref="CompletionItem.label">label</see>
        /// is used.
        /// 
        /// The `insertText` is subject to interpretation by the client side.
        /// Some tools might not take the string literally. For example
        /// VS Code when code complete is requested in this example
        /// `con<cursor position>` and a completion item with an `insertText` of
        /// `console` is provided it will only insert `sole`. Therefore it is
        /// recommended to use `textEdit` instead since it avoids additional client
        /// side interpretation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "insertText")]
        public string? InsertText { get; init; }
        /// <summary>
        /// The format of the insert text. The format applies to both the
        /// `insertText` property and the `newText` property of a provided
        /// `textEdit`. If omitted defaults to `InsertTextFormat.PlainText`.
        /// 
        /// Please note that the insertTextFormat doesn't apply to
        /// `additionalTextEdits`.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "insertTextFormat")]
        public InsertTextFormat? InsertTextFormat { get; init; }
        /// <summary>
        /// How whitespace and indentation is handled during completion
        /// item insertion. If not provided the clients default value depends on
        /// the `textDocument.completion.insertTextMode` client capability.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "insertTextMode")]
        public InsertTextMode? InsertTextMode { get; init; }
        /// <summary>
        /// An <see cref="TextEdit">edit</see> which is applied to a document when selecting
        /// this completion. When an edit is provided the value of
        /// <see cref="CompletionItem.insertText">insertText</see> is ignored.
        /// 
        /// Most editors support two different operations when accepting a completion
        /// item. One is to insert a completion text and the other is to replace an
        /// existing text with a completion text. Since this can usually not be
        /// predetermined by a server it can report both ranges. Clients need to
        /// signal support for `InsertReplaceEdits` via the
        /// `textDocument.completion.insertReplaceSupport` client capability
        /// property.
        /// 
        /// *Note 1:* The text edit's range as well as both ranges from an insert
        /// replace edit must be a [single line] and they must contain the position
        /// at which completion has been requested.
        /// *Note 2:* If an `InsertReplaceEdit` is returned the edit's insert range
        /// must be a prefix of the edit's replace range, that means it must be
        /// contained and starting at the same position.
        /// 
        /// </summary>
        [Since("3.16.0 additional type `InsertReplaceEdit`")]
        [JsonConverter(typeof(OrTypeConverter<TextEdit, InsertReplaceEdit>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "textEdit")]
        public OrType<TextEdit, InsertReplaceEdit>? TextEdit { get; init; }
        /// <summary>
        /// The edit text used if the completion item is part of a CompletionList and
        /// CompletionList defines an item default for the text edit range.
        /// 
        /// Clients will only honor this property if they opt into completion list
        /// item defaults using the capability `completionList.itemDefaults`.
        /// 
        /// If not provided and a list's default range is provided the label
        /// property is used as a text.
        /// 
        /// </summary>
        [Since("3.17.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "textEditText")]
        public string? TextEditText { get; init; }
        /// <summary>
        /// An optional array of additional <see cref="TextEdit">text edits</see> that are applied when
        /// selecting this completion. Edits must not overlap (including the same insert position)
        /// with the main <see cref="CompletionItem.textEdit">edit</see> nor with themselves.
        /// 
        /// Additional text edits should be used to change text unrelated to the current cursor position
        /// (for example adding an import statement at the top of the file if the completion item will
        /// insert an unqualified type).
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<TextEdit>))]
        [DataMember(Name = "additionalTextEdits")]
        public ImmutableArray<TextEdit> AdditionalTextEdits { get; init; }
        /// <summary>
        /// An optional set of characters that when pressed while this completion is active will accept it first and
        /// then type that character. *Note* that all commit characters should have `length=1` and that superfluous
        /// characters will be ignored.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<string>))]
        [DataMember(Name = "commitCharacters")]
        public ImmutableArray<string> CommitCharacters { get; init; }
        /// <summary>
        /// An optional <see cref="Command">command</see> that is executed *after* inserting this completion. *Note* that
        /// additional modifications to the current document should be described with the
        /// <see cref="CompletionItem.additionalTextEdits">additionalTextEdits</see>-property.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "command")]
        public CommandAction? Command { get; init; }
        /// <summary>
        /// A data entry field that is preserved on a completion item between a
        /// <see cref="CompletionRequest" /> and a <see cref="CompletionResolveRequest" />.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "data")]
        public LSPAny? Data { get; init; }
    }

}
