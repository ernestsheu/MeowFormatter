// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// A document filter denotes a document by different properties like
    /// the <see cref="TextDocument.languageId">language</see>, the <see cref="Uri.scheme">scheme</see> of
    /// its resource, or a glob-pattern that is applied to the <see cref="TextDocument.fileName">path</see>.
    /// 
    /// Glob patterns can have the following syntax:
    /// - `*` to match one or more characters in a path segment
    /// - `?` to match on one character in a path segment
    /// - `**` to match any number of path segments, including none
    /// - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
    /// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
    /// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
    /// 
    /// 
    /// </summary>
    [Since("3.17.0")]
    [JsonConverter(typeof(TextDocumentFilterConverter))]
    [DataContract]
    public record TextDocumentFilter: OrType<TextDocumentFilterLanguage, TextDocumentFilterScheme, TextDocumentFilterPattern>
    {
        public TextDocumentFilter(TextDocumentFilterLanguage TextDocumentFilterLanguage): base(TextDocumentFilterLanguage) {}
        public TextDocumentFilter(TextDocumentFilterScheme TextDocumentFilterScheme): base(TextDocumentFilterScheme) {}
        public TextDocumentFilter(TextDocumentFilterPattern TextDocumentFilterPattern): base(TextDocumentFilterPattern) {}
    }

}
