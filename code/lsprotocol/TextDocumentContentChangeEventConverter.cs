// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;

namespace Microsoft.LanguageServer.Protocol {
    public class TextDocumentContentChangeEventConverter : JsonConverter<TextDocumentContentChangeEvent>
    {
    private OrTypeConverter<TextDocumentContentChangePartial,TextDocumentContentChangeWholeDocument> _orType;
    public TextDocumentContentChangeEventConverter()
    {
    _orType = new OrTypeConverter<TextDocumentContentChangePartial,TextDocumentContentChangeWholeDocument>();
    }
    public override TextDocumentContentChangeEvent? ReadJson(JsonReader reader, Type objectType, TextDocumentContentChangeEvent? existingValue, bool hasExistingValue, JsonSerializer serializer)
    {
    reader = reader ?? throw new ArgumentNullException(nameof(reader));
    if (reader.TokenType == JsonToken.Null) { return null; }
    var o = _orType.ReadJson(reader, objectType, existingValue, serializer);
    if (o is OrType<TextDocumentContentChangePartial,TextDocumentContentChangeWholeDocument> orType)
    {
    if (orType.Value?.GetType() == typeof(TextDocumentContentChangePartial))
    {
    return new TextDocumentContentChangeEvent((TextDocumentContentChangePartial)orType.Value);
    }
    if (orType.Value?.GetType() == typeof(TextDocumentContentChangeWholeDocument))
    {
    return new TextDocumentContentChangeEvent((TextDocumentContentChangeWholeDocument)orType.Value);
    }
    }
    throw new JsonSerializationException($"Unexpected token type.");
    }
    public override void WriteJson(JsonWriter writer, TextDocumentContentChangeEvent? value, JsonSerializer serializer)
    {
    _orType.WriteJson(writer, value, serializer);
    }
    }
}
