// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// A code action represents a change that can be performed in code, e.g. to fix a problem or
    /// to refactor code.
    /// 
    /// A CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.
    /// </summary>
    [DataContract]
    public record CodeAction
    {
        [JsonConstructor]
        public CodeAction(
            string title,
            string? kind = null,
            ImmutableArray<Diagnostic> diagnostics = default!,
            bool? isPreferred = null,
            CodeActionDisabled? disabled = null,
            WorkspaceEdit? edit = null,
            CommandAction? command = null,
            LSPAny? data = null
        )
        {
            Title = title;
            Kind = kind;
            Diagnostics = diagnostics;
            IsPreferred = isPreferred;
            Disabled = disabled;
            Edit = edit;
            Command = command;
            Data = data;
        }
        /// <summary>
        /// A short, human-readable, title for this code action.
        /// </summary>
        [DataMember(Name = "title")]
        public string Title { get; init; }
        /// <summary>
        /// The kind of the code action.
        /// 
        /// Used to filter code actions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "kind")]
        public string? Kind { get; init; }
        /// <summary>
        /// The diagnostics that this code action resolves.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<Diagnostic>))]
        [DataMember(Name = "diagnostics")]
        public ImmutableArray<Diagnostic> Diagnostics { get; init; }
        /// <summary>
        /// Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted
        /// by keybindings.
        /// 
        /// A quick fix should be marked preferred if it properly addresses the underlying error.
        /// A refactoring should be marked preferred if it is the most reasonable choice of actions to take.
        /// 
        /// </summary>
        [Since("3.15.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "isPreferred")]
        public bool? IsPreferred { get; init; }
        /// <summary>
        /// Marks that the code action cannot currently be applied.
        /// 
        /// Clients should follow the following guidelines regarding disabled code actions:
        /// 
        ///   - Disabled code actions are not shown in automatic [lightbulbs](https://code.visualstudio.com/docs/editor/editingevolved#_code-action)
        ///     code action menus.
        /// 
        ///   - Disabled actions are shown as faded out in the code action menu when the user requests a more specific type
        ///     of code action, such as refactorings.
        /// 
        ///   - If the user has a [keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions)
        ///     that auto applies a code action and only disabled code actions are returned, the client should show the user an
        ///     error message with `reason` in the editor.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "disabled")]
        public CodeActionDisabled? Disabled { get; init; }
        /// <summary>
        /// The workspace edit this code action performs.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "edit")]
        public WorkspaceEdit? Edit { get; init; }
        /// <summary>
        /// A command this code action executes. If a code action
        /// provides an edit and a command, first the edit is
        /// executed and then the command.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "command")]
        public CommandAction? Command { get; init; }
        /// <summary>
        /// A data entry field that is preserved on a code action between
        /// a `textDocument/codeAction` and a `codeAction/resolve` request.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "data")]
        public LSPAny? Data { get; init; }
    }

}
