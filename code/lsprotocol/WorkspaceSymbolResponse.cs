// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// A request to list project-wide symbols matching the query string given
    /// by the <see cref="WorkspaceSymbolParams" />. The response is
    /// of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
    /// resolves to such.
    /// 
    ///  need to advertise support for WorkspaceSymbols via the client capability
    ///  `workspace.symbol.resolveSupport`.
    /// </summary>
    [Since("3.17.0 - support for WorkspaceSymbol in the returned data. Clientsneed to advertise support for WorkspaceSymbols via the client capability`workspace.symbol.resolveSupport`.")]
    [LSPResponse(typeof(WorkspaceSymbolRequest))]
    [DataContract]
    public record WorkspaceSymbolResponse: IResponse<OrType<ImmutableArray<SymbolInformation>, ImmutableArray<WorkspaceSymbol>>>
    {
        [JsonConstructor]
        public WorkspaceSymbolResponse(
            OrType<string, int> id,
            string jsonrpc = "2.0",
            OrType<ImmutableArray<SymbolInformation>, ImmutableArray<WorkspaceSymbol>>? result = null,
            ResponseError? error = null
        )
        {
            JsonRPC = jsonrpc;
            Id = id;
            Result = result;
            Error = error;
        }
        /// <summary>
        /// The jsonrpc version.
        /// </summary>
        [DataMember(Name = "jsonrpc")]
        public string JsonRPC { get; init; } = "2.0";
        /// <summary>
        /// The Request id.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<string, int>))]
        [DataMember(Name = "id")]
        public OrType<string, int> Id { get; init; }
        /// <summary>
        /// Results for the request.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<ImmutableArray<SymbolInformation>, ImmutableArray<WorkspaceSymbol>>))]
        [DataMember(Name = "result")]
        public OrType<ImmutableArray<SymbolInformation>, ImmutableArray<WorkspaceSymbol>>? Result { get; init; }
        /// <summary>
        /// Error while handling the request.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "error")]
        public ResponseError? Error { get; init; }
    }

}
