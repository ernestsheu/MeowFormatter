// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Represents information about programming constructs like variables, classes,
    /// interfaces etc.
    /// </summary>
    [DataContract]
    public record SymbolInformation
    {
        [JsonConstructor]
        public SymbolInformation(
            Location location,
            string name,
            SymbolKind kind,
            bool? deprecated = null,
            ImmutableArray<SymbolTag> tags = default!,
            string? containerName = null
        )
        {
            Deprecated = deprecated;
            Location = location;
            Name = name;
            Kind = kind;
            Tags = tags;
            ContainerName = containerName;
        }
        /// <summary>
        /// Indicates if this symbol is deprecated.
        /// 
        /// </summary>
        [Obsolete("Use tags instead")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "deprecated")]
        public bool? Deprecated { get; init; }
        /// <summary>
        /// The location of this symbol. The location's range is used by a tool
        /// to reveal the location in the editor. If the symbol is selected in the
        /// tool the range's start information is used to position the cursor. So
        /// the range usually spans more than the actual symbol's name and does
        /// normally include things like visibility modifiers.
        /// 
        /// The range doesn't have to denote a node range in the sense of an abstract
        /// syntax tree. It can therefore not be used to re-construct a hierarchy of
        /// the symbols.
        /// </summary>
        [DataMember(Name = "location")]
        public Location Location { get; init; }
        /// <summary>
        /// The name of this symbol.
        /// </summary>
        [DataMember(Name = "name")]
        public string Name { get; init; }
        /// <summary>
        /// The kind of this symbol.
        /// </summary>
        [DataMember(Name = "kind")]
        public SymbolKind Kind { get; init; }
        /// <summary>
        /// Tags for this symbol.
        /// 
        /// </summary>
        [Since("3.16.0")]
        [JsonConverter(typeof(CustomArrayConverter<SymbolTag>))]
        [DataMember(Name = "tags")]
        public ImmutableArray<SymbolTag> Tags { get; init; }
        /// <summary>
        /// The name of the symbol containing this symbol. This information is for
        /// user interface purposes (e.g. to render a qualifier in the user interface
        /// if necessary). It can't be used to re-infer a hierarchy for the document
        /// symbols.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "containerName")]
        public string? ContainerName { get; init; }
    }

}
