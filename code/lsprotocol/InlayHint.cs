// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT

using Newtonsoft.Json;
using System.Collections.Immutable;
using System.Runtime.Serialization;

namespace Microsoft.LanguageServer.Protocol {
    /// <summary>
    /// Inlay hint information.
    /// 
    /// </summary>
    [Since("3.17.0")]
    [DataContract]
    public record InlayHint
    {
        [JsonConstructor]
        public InlayHint(
            Position position,
            OrType<string, ImmutableArray<InlayHintLabelPart>> label,
            InlayHintKind? kind = null,
            ImmutableArray<TextEdit> textEdits = default!,
            OrType<string, MarkupContent>? tooltip = null,
            bool? paddingLeft = null,
            bool? paddingRight = null,
            LSPAny? data = null
        )
        {
            Position = position;
            Label = label;
            Kind = kind;
            TextEdits = textEdits;
            Tooltip = tooltip;
            PaddingLeft = paddingLeft;
            PaddingRight = paddingRight;
            Data = data;
        }
        /// <summary>
        /// The position of this hint.
        /// 
        /// If multiple hints have the same position, they will be shown in the order
        /// they appear in the response.
        /// </summary>
        [DataMember(Name = "position")]
        public Position Position { get; init; }
        /// <summary>
        /// The label of this hint. A human readable string or an array of
        /// InlayHintLabelPart label parts.
        /// 
        /// *Note* that neither the string nor the label part can be empty.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<string, ImmutableArray<InlayHintLabelPart>>))]
        [DataMember(Name = "label")]
        public OrType<string, ImmutableArray<InlayHintLabelPart>> Label { get; init; }
        /// <summary>
        /// The kind of this hint. Can be omitted in which case the client
        /// should fall back to a reasonable default.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "kind")]
        public InlayHintKind? Kind { get; init; }
        /// <summary>
        /// Optional text edits that are performed when accepting this inlay hint.
        /// 
        /// *Note* that edits are expected to change the document so that the inlay
        /// hint (or its nearest variant) is now part of the document and the inlay
        /// hint itself is now obsolete.
        /// </summary>
        [JsonConverter(typeof(CustomArrayConverter<TextEdit>))]
        [DataMember(Name = "textEdits")]
        public ImmutableArray<TextEdit> TextEdits { get; init; }
        /// <summary>
        /// The tooltip text when you hover over this item.
        /// </summary>
        [JsonConverter(typeof(OrTypeConverter<string, MarkupContent>))]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "tooltip")]
        public OrType<string, MarkupContent>? Tooltip { get; init; }
        /// <summary>
        /// Render padding before the hint.
        /// 
        /// Note: Padding should use the editor's background color, not the
        /// background color of the hint itself. That means padding can be used
        /// to visually align/separate an inlay hint.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "paddingLeft")]
        public bool? PaddingLeft { get; init; }
        /// <summary>
        /// Render padding after the hint.
        /// 
        /// Note: Padding should use the editor's background color, not the
        /// background color of the hint itself. That means padding can be used
        /// to visually align/separate an inlay hint.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "paddingRight")]
        public bool? PaddingRight { get; init; }
        /// <summary>
        /// A data entry field that is preserved on an inlay hint between
        /// a `textDocument/inlayHint` and a `inlayHint/resolve` request.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        [DataMember(Name = "data")]
        public LSPAny? Data { get; init; }
    }

}
